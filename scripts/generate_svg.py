import os
import requests
from datetime import datetime

LASTFM_API_KEY = os.getenv("LASTFM_API_KEY")
LASTFM_USERNAME = os.getenv("LASTFM_USERNAME")
OUTPUT_PATH = "assets/lastfm_widget.svg"

def get_track_info():
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user={LASTFM_USERNAME}&api_key={LASTFM_API_KEY}&format=json&limit=1"
    
    try:
        print("‚åõ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Last.fm...")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if not data.get("recenttracks", {}).get("track"):
            print("‚ö†Ô∏è Last.fm –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–∞—Ö")
            return None
            
        track = data["recenttracks"]["track"][0]
        print(f"üéµ –ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫: {track.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {track['artist'].get('#text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫—É (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        cover_url = track.get("image", [{}])[-1].get("#text")
        if cover_url and "placeholder" not in cover_url.lower():
            print(f"üñºÔ∏è –û–±–ª–æ–∂–∫–∞: {cover_url}")
        else:
            print("üñºÔ∏è –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            cover_url = None
            
        return {
            "name": track.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫"),
            "artist": track["artist"].get("#text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"),
            "now_playing": track.get("@attr", {}).get("nowplaying", "false") == "true",
            "cover": cover_url
        }
        
    except requests.exceptions.RequestException as e:
        print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return None

def create_svg(track_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–±–ª–æ–∂–∫–∏"""
    track = track_data or {
        "name": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "artist": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "now_playing": False,
        "cover": None
    }
    
    # –ë–ª–æ–∫ –æ–±–ª–æ–∂–∫–∏
    cover_block = ""
    if track["cover"]:
        cover_block = f'<image href="{track["cover"]}" x="20" y="20" width="110" height="110" preserveAspectRatio="xMidYMid meet"/>'
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞ –≤ SVG")
    else:
        cover_block = '''
        <rect x="20" y="20" width="110" height="110" fill="#6A0099" rx="4"/>
        <text x="75" y="65" text-anchor="middle" font-family="Arial" font-size="12" fill="white">No cover</text>'''
        print("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –æ–±–ª–æ–∂–∫–∏")
    
    return f'''<svg width="400" height="150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <rect width="100%" height="100%" fill="#9400D3" rx="6"/>
    {cover_block}
    <text x="150" y="40" font-family="Arial" font-size="16" font-weight="bold" fill="white">
        {track["name"][:20]}{"..." if len(track["name"]) > 20 else ""}
    </text>
    <text x="150" y="70" font-family="Arial" font-size="14" fill="#EEE">
        {track["artist"][:20]}{"..." if len(track["artist"]) > 20 else ""}
    </text>
    <text x="150" y="100" font-family="Arial" font-size="12" fill="#DDD">
        {"‚ñ∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç" if track["now_playing"] else "‚è± " + datetime.now().strftime("%H:%M")}
    </text>
</svg>'''

if __name__ == "__main__":
    print("\n=== üé∂ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Last.fm –≤–∏–¥–∂–µ—Ç–∞ ===")
    os.makedirs("assets", exist_ok=True)
    
    track = get_track_info()
    svg_content = create_svg(track)
    
    with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
        f.write(svg_content)
    print("‚úÖ SVG —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\n")
